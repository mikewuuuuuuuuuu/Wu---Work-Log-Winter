import tkinter as tk

# Nullify both calculator window and Stopwatch window, so that calculator and stopwatch doesn't have a specific value.
# Initialize the variable without assigning it a specific value.

calculator_window = None
stopwatch_window = None

# Class to create a blueprint for creating stopwatch objects.

class Stopwatch:
    def __init__(self, root):
        self.root = root
        self.root.title("Stopwatch")

        # Initialize the time elapsed and running status

        self.time_elapsed = 0
        self.running = False

        # Create label to display time and buttons for starting and resetting the stopwatch

        self.time_label = tk.Label(root, text="0:00.0", font=("Calibri", 36))
        self.start_button = tk.Button(root, text="Start", command=self.start_stop)
        self.reset_button = tk.Button(root, text="Reset", command=self.reset)

        # Put the labels and buttons in the GUI window

        self.time_label.pack(pady=20)
        self.start_button.pack()
        self.reset_button.pack()

        # Use the update_time method

        self.update_time()

    # Start and stop the stopwatch

    def start_stop(self):
        if self.running:
            self.running = False
            self.start_button.config(text="Start")
        else:
            self.running = True
            self.start_button.config(text="Stop")
            self.update_time()

    # Reset the stopwatch

    def reset(self):
        self.running = False
        self.time_elapsed = 0
        self.time_label.config(text="0:00.0")
        self.start_button.config(text="Start")

    # Update the time for the stopwatch on the label

    def update_time(self):
        if self.running:
            self.time_elapsed += 0.1
            minutes = int(self.time_elapsed / 60)
            seconds = int(self.time_elapsed % 60)
            tenths = int((self.time_elapsed * 10) % 10)
            time_str = f"{minutes}:{seconds:02}.{tenths}"
            self.time_label.config(text=time_str)

            # Use the update_time method after 100 milliseconds

            self.root.after(100, self.update_time)

# Define open stopwatch command and window

def open_stopwatch():

    # Making the stopwatch window global to keep track of the window
    global stopwatch_window
    if stopwatch_window is not None:
        return
    stopwatch_window = tk.Toplevel(root)
    stopwatch_window.title("Stopwatch")

    stopwatch_window.geometry("270x200")

    stopwatch = Stopwatch(stopwatch_window)


# Exit Stopwatch

def exit_stopwatch():
    global stopwatch_window
    if stopwatch_window is not None:
        stopwatch_window.destroy()
        stopwatch_window = None

# Start a calculator def and add calculation methods

def open_calculator():
    global calculation
    calculation = ""

    # Add calculation for numbers and symbols

    def add_to_calculation(symbol):
        global calculation
        calculation += str(symbol)
        text_results.delete(1.0, "end")
        text_results.insert(1.0, calculation)

    # Evaluate calculation with all the added numbers and symbols

    def evaluate_calculation():

        global calculation
        try:
            # Evaluate calculation, and convert the result to string
            calculation = str(eval(calculation))
            text_results.delete(1.0, "end")
            text_results.insert(1.0, calculation)
        except Exception as e:
            clear_field()
            text_results.insert(1.0, "Error")

    # Clear calculation results

    def clear_field():
        global calculation
        calculation = ""
        text_results.delete(1.0, "end")

    # Create a new calculator window

    calculator = tk.Toplevel(root)
    calculator.title("Calculator")

    calculator.geometry("270x300")

    text_results = tk.Text(calculator, height=2, width=16, font=("Calibri", 24))
    text_results.grid(columnspan=5)

    # Make all the buttons in rows and columns for each individual functions adding to the calculation

    # Use lambda to pass arguments to the add_to_calculation function
    btn_1 = tk.Button(calculator, text="1", command=lambda: add_to_calculation(1), width=5, font=("calibri", 14))
    btn_1.grid(row=2, column=1)
    btn_2 = tk.Button(calculator, text="2", command=lambda: add_to_calculation(2), width=5, font=("calibri", 14))
    btn_2.grid(row=2, column=2)
    btn_3 = tk.Button(calculator, text="3", command=lambda: add_to_calculation(3), width=5, font=("calibri", 14))
    btn_3.grid(row=2, column=3)
    btn_4 = tk.Button(calculator, text="4", command=lambda: add_to_calculation(4), width=5, font=("calibri", 14))
    btn_4.grid(row=3, column=1)
    btn_5 = tk.Button(calculator, text="5", command=lambda: add_to_calculation(5), width=5, font=("calibri", 14))
    btn_5.grid(row=3, column=2)
    btn_6 = tk.Button(calculator, text="6", command=lambda: add_to_calculation(6), width=5, font=("calibri", 14))
    btn_6.grid(row=3, column=3)
    btn_7 = tk.Button(calculator, text="7", command=lambda: add_to_calculation(7), width=5, font=("calibri", 14))
    btn_7.grid(row=4, column=1)
    btn_8 = tk.Button(calculator, text="8", command=lambda: add_to_calculation(8), width=5, font=("calibri", 14))
    btn_8.grid(row=4, column=2)
    btn_9 = tk.Button(calculator, text="9", command=lambda: add_to_calculation(9), width=5, font=("calibri", 14))
    btn_9.grid(row=4, column=3)
    btn_0 = tk.Button(calculator, text="0", command=lambda: add_to_calculation(0), width=5, font=("calibri", 14))
    btn_0.grid(row=5, column=2)

    btn_plus = tk.Button(calculator, text="+", command=lambda: add_to_calculation("+"), width=5, font=("calibri", 14))
    btn_plus.grid(row=2, column=4)
    btn_minus = tk.Button(calculator, text="-", command=lambda: add_to_calculation("-"), width=5, font=("calibri", 14))
    btn_minus.grid(row=3, column=4)
    btn_times = tk.Button(calculator, text="*", command=lambda: add_to_calculation("*"), width=5, font=("calibri", 14))
    btn_times.grid(row=4, column=4)
    btn_divide = tk.Button(calculator, text="/", command=lambda: add_to_calculation("/"), width=5, font=("calibri", 14))
    btn_divide.grid(row=5, column=4)

    btn_open = tk.Button(calculator, text="(", command=lambda: add_to_calculation("("), width=5, font=("calibri", 14))
    btn_open.grid(row=5, column=1)
    btn_close = tk.Button(calculator, text=")", command=lambda: add_to_calculation(")"), width=5, font=("calibri", 14))
    btn_close.grid(row=5, column=3)

    btn_equals = tk.Button(calculator, text="=", command=evaluate_calculation, width=11, font=("calibri", 14))
    btn_equals.grid(row=6, column=3, columnspan=2)
    btn_clear = tk.Button(calculator, text="C", command=clear_field, width=11, font=("calibri", 14))
    btn_clear.grid(row=6, column=1, columnspan=2)

# Exit calculator

def exit_calculator():
    calculator_window.destroy()

# Start a new tip calculator

def tip_calc_window():
    tip_window = tk.Toplevel(root)
    tip_window.title("Tip Calculator")
    tip_window.geometry("300x300")

    label_tip_percent = tk.Label(tip_window, text="Enter Tip Percentage (%)")
    label_tip_percent.pack()

    entry_tip_percent = tk.Entry(tip_window)
    entry_tip_percent.pack()

    label_bill_dollars = tk.Label(tip_window, text="Enter the Bill Amount ($)")
    label_bill_dollars.pack()

    entry_bill_dollars = tk.Entry(tip_window)
    entry_bill_dollars.pack()

    # Calculate tip function

    def calculate_tip():
        try:
            tip_percent = float(entry_tip_percent.get())
            bill_dollars = float(entry_bill_dollars.get())
            tip_amount = tip_percent * bill_dollars / 100
            result_label.config(text=f'Your tip should be ${tip_amount}')
            result_label_total.config(text=f'Your total bill would be ${tip_amount + bill_dollars}')
        except ValueError:
            result_label.config(text="Please enter valid numbers.")
            result_label_total.config(text="")

    button_calculate = tk.Button(tip_window, text="Calculate", command=calculate_tip)
    button_calculate.pack()

    result_label = tk.Label(tip_window, text="", font=("Calibri", 12))
    result_label.pack()

    result_label_total = tk.Label(tip_window, text="", font=("Calibri", 12))
    result_label_total.pack()

# Start a todo list

def open_todo_list():
    todo_window = tk.Toplevel(root)
    todo_window.title("To-Do List")
    todo_window.geometry("300x400")

    tasks = []

    # Add task to the todo list

    def add_task():
        task = entry_task.get()
        if task:
            tasks.append(task)
            update_listbox()
            entry_task.delete(0,'end')

    # Remove task from the todo list

    def remove_task():
        selected_task = list_tasks.curselection()
        if selected_task:
            index = selected_task[0]
            del tasks[index]
            update_listbox()

    # Ranks each task from being added early to late

    def update_listbox():
        list_tasks.delete(0, tk.END)
        for task in tasks:
            list_tasks.insert(tk.END, task)

    label_task = tk.Label(todo_window, text="Task:")
    label_task.pack()

    entry_task = tk.Entry(todo_window, width=30)
    entry_task.pack()

    button_add_task = tk.Button(todo_window, text="Add Task", command=add_task)
    button_add_task.pack(pady=5)

    list_tasks = tk.Listbox(todo_window, width=30)
    list_tasks.pack()

    button_remove_task = tk.Button(todo_window, text="Remove Task", command=remove_task)
    button_remove_task.pack(pady=5)

    update_listbox()


# Creating the unit converter window
def add_todo_list_to_menu(menu_bar):
    todo_menu = tk.Menu(menu_bar, tearoff=0)
    todo_menu.add_command(label="Open", command=open_todo_list)
    menu_bar.add_cascade(label="To-Do List", menu=todo_menu)


def open_unit_convertor():

    unit_convertor_window = tk.Toplevel(root)
    unit_convertor_window.title("Unit Convertor")
    unit_convertor_window.geometry("500x400")

    # Converting Length Units
    def convert_length(direction):
        try:
            input_value = float(entry_length.get())
            if direction == "to_cm":
                converted_value = round(input_value * 2.54, 1)
                result_label_length.config(text=f'{input_value} inches is {converted_value} centimeters.')
            elif direction == "to_inches":
                converted_value = round(input_value / 2.54, 1)
                result_label_length.config(text=f'{input_value} centimeters is {converted_value} inches.')
        except ValueError:
            result_label_length.config(text="Please enter a valid number.")

    def convert_weight(direction):
        try:
            input_value = float(entry_weight.get())
            if direction == "to_kg":
                converted_value = round(input_value * 0.453592, 1)
                result_label_weight.config(text=f'{input_value} pounds is {converted_value} kilograms.')
            elif direction == "to_pounds":
                converted_value = round(input_value / 0.453592, 1)
                result_label_weight.config(text=f'{input_value} kilograms is {converted_value} pounds.')
        except ValueError:
            result_label_weight.config(text="Please enter a valid number.")

    def convert_temp(direction):
        try:
            input_value = float(entry_temp.get())
            if direction == "to_celsius":
                converted_value = round((input_value - 32) * 5 / 9, 1)
                result_label_temp.config(text=f'{input_value} Fahrenheit is {converted_value} Celsius.')
            elif direction == "to_fahrenheit":
                converted_value = round((input_value * 9 / 5) + 32, 1)
                result_label_temp.config(text=f'{input_value} Celsius is {converted_value} Fahrenheit.')
        except ValueError:
            result_label_temp.config(text="Please enter a valid number.")

        # Length Conversion

    label_length = tk.Label(unit_convertor_window, text="Convert Length:")
    label_length.pack()
    entry_length = tk.Entry(unit_convertor_window)
    entry_length.pack()
    button_to_cm = tk.Button(unit_convertor_window, text="To Centimeters", command=lambda: convert_length("to_cm"))
    button_to_cm.pack()
    button_to_inches = tk.Button(unit_convertor_window, text="To Inches", command=lambda: convert_length("to_inches"))
    button_to_inches.pack()
    result_label_length = tk.Label(unit_convertor_window, text="", font=("Calibri", 12))
    result_label_length.pack()

    # Weight Conversion
    label_weight = tk.Label(unit_convertor_window, text="Convert Weight:")
    label_weight.pack()
    entry_weight = tk.Entry(unit_convertor_window)
    entry_weight.pack()
    button_to_kg = tk.Button(unit_convertor_window, text="To Kilograms", command=lambda: convert_weight("to_kg"))
    button_to_kg.pack()
    button_to_pounds = tk.Button(unit_convertor_window, text="To Pounds", command=lambda: convert_weight("to_pounds"))
    button_to_pounds.pack()
    result_label_weight = tk.Label(unit_convertor_window, text="", font=("Calibri", 12))
    result_label_weight.pack()

    # Temperature Conversion
    label_temp = tk.Label(unit_convertor_window, text="Convert Temperature:")
    label_temp.pack()
    entry_temp = tk.Entry(unit_convertor_window)
    entry_temp.pack()
    button_to_celsius = tk.Button(unit_convertor_window, text="To Celsius", command=lambda: convert_temp("to_celsius"))
    button_to_celsius.pack()
    button_to_fahrenheit = tk.Button(unit_convertor_window, text="To Fahrenheit", command=lambda: convert_temp("to_fahrenheit"))
    button_to_fahrenheit.pack()
    result_label_temp = tk.Label(unit_convertor_window, text="", font=("Calibri", 12))
    result_label_temp.pack()

# Start the Basic GUI window

root = tk.Tk()
root.title("USEFUL Toolbox")
root.geometry("350x300")

# Create Menubar
menu_bar = tk.Menu(root)

# Add a dropdown menu for the Calculator
calculator_menu = tk.Menu(menu_bar, tearoff=0)
calculator_menu.add_command(label="Calculator", command=open_calculator)
calculator_menu.add_command(label="Tip Calculator", command=tip_calc_window)
calculator_menu.add_command(label="Exit", command=exit_calculator)

menu_bar.add_cascade(label="Calculators", menu=calculator_menu)

# Add a dropdown menu for the Stopwatch
stopwatch_menu = tk.Menu(menu_bar, tearoff=0)
stopwatch_menu.add_command(label="Open", command=open_stopwatch)
stopwatch_menu.add_command(label="Exit", command=exit_stopwatch)

menu_bar.add_cascade(label="Stopwatch", menu=stopwatch_menu)

root.config(menu=menu_bar)

# Create label for the welcoming message
welcome_label = tk.Label(root, text="Welcome to USEFUL Toolbox", font=("Calibri", 20), fg="#008B8B", bg="#FFD580")
welcome_label.pack(fill="both", expand=True)

# Add todo list to the menu as a dropdown menu
add_todo_list_to_menu(menu_bar)

# Add a dropdown menu for the Unit Converter
unit_convertor_menu = tk.Menu(menu_bar, tearoff=0)
unit_convertor_menu.add_command(label="Unit Convertor", command=open_unit_convertor)
menu_bar.add_cascade(label="Unit Convertor", menu=unit_convertor_menu)

root.mainloop()
